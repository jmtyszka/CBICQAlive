#!/bin/bash
#
# Run in vivo QC on a single 4D EPI fMRI dataset
# - Creates a results directory at the same level as the EPI file
#
# USAGE   : cbicqclive <4D Nifti fMRI volume>"
# EXAMPLE : cbicqclive my_rsbold.nii.gz"
#
# AUTHOR : Mike Tyszka, Ph.D.
# PLACE  : Caltech
# DATES  : 2014-02-12 JMT From scratch
#          2016-02-12 JMT Add HTML and PDF report generation
#          2016-07-13 JMT Add multifile batching and complete HTML reporting
#          2017-07-31 JMT Refactor all refs to quality assurance to quality control
#                         Switch to single file processing with separate batch script
#
# Copyright 2014-2017 California Institute of Technology
# All rights reserved.

if [ $# -lt 2 ]; then
    echo "USAGE   : cbicqclive <4D Nifti fMRI volume> <Output Directory> <phantom|[invivo]>"
    echo "EXAMPLE : cbicqclive sub-A/ses-1/func/sub-A/ses-1/task-rest_bold.nii.gz derivatives/qc invivo"
    exit
fi

# Parse arguments
epi_file=$1
out_dir=$2

if [ $# -lt 3 ]; then
    samp_type='invivo'
else
    samp_type=$3
fi

# Check that EPI file exists
if [ ! -s ${epi_file} ]; then
    echo "${epi_file} does not exist - skipping"
    exit
fi

# Create a QCLive directory at the same level
# Leave deletion of files to user since this script reuses previous results where possible
qc_base=`basename ${epi_file%%.nii.gz}`.qclive
qc_dir=${out_dir}/${qc_base}
if [ ! -d ${qc_dir} ]; then
    mkdir -p ${qc_dir}
fi

# TR required for high pass filtering
TR_secs=`fslinfo ${epi_file} | awk '{ if ( $1 == "pixdim4") print $2}'`

# Number of volumes in timeseries
N_vols=`fslinfo ${epi_file} | awk '{ if ($1 == "dim4") print $2 }'`

# Splash
echo ""
echo "------------------------------------------"
echo "QCLive : in vivo quality control metrics"
echo "------------------------------------------"
echo "4D EPI Data : ${epi_file}"
echo "QC Dir      : ${qc_dir}"
echo "TR (s)      : ${TR_secs}"
echo "Num Vols    : ${N_vols}"
echo ""

# Key filenames
qc_info=${qc_dir}/qc_info.csv

# Stats images
qc_mcf=${qc_dir}/qc_mcf
qc_filt=${qc_dir}/qc_filt
qc_tmean=${qc_dir}/qc_tmean
qc_tsd=${qc_dir}/qc_tsd
qc_tsfnr=${qc_dir}/qc_tsfnr

# Mask images
qc_signal_mask=${qc_dir}/qc_signal_mask
qc_labels=${qc_dir}/qc_labels

# Stats text results
qc_tsnr_mean=${qc_dir}/qc_tsnr_mean.txt
qc_mcf_par=${qc_dir}/qc_mcf.par
qc_mcf_mean=${qc_dir}/qc_mcf_mean.txt
qc_dvars_ts=${qc_dir}/qc_dvars_ts.txt
qc_roi_ts=${qc_dir}/qc_roi_ts.txt
qc_stats=${qc_dir}/qc_stats.csv

# Check whether MOCO has already been performed
if [ -s ${qc_mcf}.nii.gz ] && [ -s ${qc_mcf_par} ]; then
    echo "Motion correction has already been done - skipping"
else
    echo "Motion correcting"
    # Run mcflirt on QC Nifti file
    # Output file defaults to qc_mcf.nii.gz, parameters in qc_mcf.par
    mcflirt -in ${epi_file} -out ${qc_mcf} -refvol 0 -plots
fi

#
# Non-linear high pass filtering to remove slow baselines
# Standard step in FEAT pipeline

if [ -s ${qc_filt}.nii.gz ]; then
    echo "Temporal high pass filtering has already been done - skipping"
else
    sigma_seconds=50.0
    sigma_vols=`echo $TR_secs | awk -v s=${sigma_seconds} '{ print s / $1 }'`
    echo "Temporal high pass filtering : sigma = ${sigma_seconds} seconds, ${sigma_vols} volumes"
    fslmaths ${qc_mcf} -bptf ${sigma_vols} -1 ${qc_filt}
fi

#
# Temporal summary images
#

if [ -s ${qc_tmean}.nii.gz ]
then
    echo "  Mean image exists - skipping"
else
    echo "  Calculating tMean image from motion corrected data"
    fslmaths ${qc_mcf} -Tmean ${qc_tmean}
fi

# Temporal SD of registered images
if [ -s ${qc_tsd}.nii.gz ]
then
    echo "  SD image exists - skipping"
else
    echo "  Calculating temporal fluctuation noise SD (HPF signal)"
    fslmaths ${qc_filt} -Tstd ${qc_tsd}
fi

# Voxel-wise tSFNR image
if [ -s ${qc_tsfnr}.nii.gz ]
then
    echo "  tSFNR image exists - skipping"
else
    echo "  Estimating tSFNR image (tMean / tSD)"
    fslmaths ${qc_tmean} -div ${qc_tsd} ${qc_tsfnr}
fi

#
# Regional mask creation from temporal mean image
#

if [ -s ${qc_labels}.nii.gz ]
then
    echo "  Mask image exists - skipping"
else

    # Temporary Nifti files
    tmp_signal_mask=${qc_dir}/tmp_signal_mask
    tmp_signal_mask_dil=${qc_dir}/tmp_signal_mask_dil
    tmp_brain=${qc_dir}/tmp_brain
    tmp_brain_mask=${tmp_brain}_mask
    tmp_nyquist_mask=${qc_dir}/tmp_nyquist
    tmp_upper_mask=${qc_dir}/tmp_upper
    tmp_lower_mask=${qc_dir}/tmp_lower
    tmp_air_mask=${qc_dir}/tmp_air

    # Signal threshold for basic segmentation
    # 10% of the 99th percentile of intensity
    signal_threshold=`fslstats $qc_tmean -p 99 | awk '{ print $1 * 0.1 }'`

    # Signal mask for phantoms, brain mask for in vivo data
    if [ ${samp_type} == 'invivo' ]; then
        echo "  Creating signal mask (BET)"
        bet ${qc_tmean} ${tmp_brain} -m -R
        immv ${tmp_brain_mask} ${tmp_signal_mask}
    else
        echo "  Creating signal mask (threshold = ${signal_threshold})"
        fslmaths ${qc_tmean} -thr ${signal_threshold} -bin ${tmp_signal_mask}
    fi

    # Erode signal mask once, then dilate twice ( = open + dilate )
    echo "  Open and dilate signal mask (5 mm radius kernel)"
    fslmaths ${tmp_signal_mask} -kernel sphere 5.0 -ero -dilF -dilF ${tmp_signal_mask_dil}

    echo "  Creating Nyquist mask"
    # Determine y dimension (PE dim in EPI)
    half_ny=`fslinfo ${qc_tmean} | awk '{ if ($1 == "dim2") print $2/2 }'`

    # Extract upper and lower halves of dilated volume mask in Y dimension (PE)
    fslroi ${tmp_signal_mask_dil} ${tmp_lower_mask} 0 -1 0 ${half_ny} 0 -1 0 -1
    fslroi ${tmp_signal_mask_dil} ${tmp_upper_mask} 0 -1 ${half_ny} -1 0 -1 0 -1

    # Create shifted (Nyqusit) mask from swapped upper and lower masks
    fslmerge -y ${tmp_nyquist_mask} ${tmp_upper_mask} ${tmp_lower_mask}

    # Correct y offset in sform matrix
    sform=`fslorient -getsform ${tmp_signal_mask}`
    fslorient -setsform ${sform} ${tmp_nyquist_mask}

    # XOR Nyquist and dilated signal masks
    fslmaths ${tmp_nyquist_mask} -mul ${tmp_signal_mask_dil} -mul -1.0 -add ${tmp_nyquist_mask} ${tmp_nyquist_mask}

    echo "  Creating air mask"
    # Create air mask by subtracting Nyquist mask from NOT dilated signal mask
    fslmaths ${tmp_signal_mask_dil} -binv -sub ${tmp_nyquist_mask} ${tmp_air_mask}

    # Finally merge all masks into an ROI label file
    # Signal          = 1
    # Nyquist Ghost   = 2
    # Air Space       = 3
    fslmaths ${tmp_signal_mask} -mul 1 ${tmp_signal_mask}
    fslmaths ${tmp_nyquist_mask} -mul 2 ${tmp_nyquist_mask}
    fslmaths ${tmp_air_mask} -mul 3 ${tmp_air_mask}
    fslmaths ${tmp_signal_mask} -add ${tmp_nyquist_mask} -add ${tmp_air_mask} ${qc_labels}

    # Save signal mask
    imcp ${tmp_signal_mask} ${qc_signal_mask}

    # Clean up temporary images
    echo "  Cleaning up temporary images"
    rm -rf ${qc_dir}/tmp*.*

fi

# Create orthogonal slice views temporal summary images and masks
scale_factor=2.5
slicer ${qc_tmean} -s ${scale_factor} -a ${qc_dir}/qc_tmean_ortho.png
slicer ${qc_tsd} -s ${scale_factor} -a ${qc_dir}/qc_tsd_ortho.png
slicer ${qc_labels} -s ${scale_factor} -a ${qc_dir}/qc_labels_ortho.png

# Colorized tSFNR with fixed intensity scale
slicer ${qc_tsfnr} -i 0.0 100.0 -s ${scale_factor} -a ${qc_dir}/qc_tsfnr_ortho.png

# Median tSFNR within signal mask
tSFNR=`fslstats ${qc_tsfnr} -k ${qc_signal_mask} -P 50`
echo "Signal $tSFNR" >> ${qc_dir}/qc_tsfnr.txt

# DVARS timecourse
if [ -s ${qc_dvars_ts} ]; then
    echo "  DVARS timecourse exists - skipping"
else
    echo "  Calculating DVARS timecourse within signal mask for motion corrected data"
    fsl_motion_outliers -i ${qc_mcf} -m ${qc_signal_mask} -o /dev/null -s ${qc_dvars_ts} --dvars --nomoco
fi

# Extract time-series stats within each ROI
if [ -s ${qc_roi_ts} ]; then
    echo "  Signal timecourses exist - skipping"
else
    echo "  Extracting mean signal timecourses for each region"
    # Timecourse of mean signal within each mask label
    fslmeants -i ${qc_mcf} -o ${qc_roi_ts} --label=${qc_labels}
fi

# Generate summary statistics and plots in QC directory
cbicqclive_stats.py -i ${qc_dir}

# Write summary info to CSV file
echo "  Saving QC summary info to ${qc_info}"
pre_str="$qc_dir, $TR_secs, $N_vols, $tSFNR"
stats_str=`awk '{ printf ", %g, %g, %g", $2, $3, $5 }' $qc_stats`
echo "${pre_str}${stats_str}" > ${qc_info}

# Generate HTML report page (index.html) in QC directory
cbicqclive_report.py -i ${qc_dir}

# Done
echo "Finished at : `date`"